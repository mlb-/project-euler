(ns project-euler.core)

(defn euler-1
  "Given a limit and multiplicands, find the sum of all multiples less than
  the limit. This, of course, does not include duplicate products."
  [limit & multiplicands]
  {:pre [(= 2 (count multiplicands))]}
  (->> multiplicands
       (map (partial range 0 limit))
       (apply concat)
       set
       (apply +)))

(defn- fibonacci
  "Provide a Clojure lazy-sequence for Fibonacci numbers."
  ([]
   (fibonacci 1 2))
  ([a b]
  (cons a (lazy-seq (fibonacci b (+ b a))))))

(defn euler-2
  "By considering the terms in the Fibonacci sequence whose values do not
  exceed four million, find the sum of the even-valued terms."
  [limit]
  (->> (fibonacci)
       (take-while (partial > limit))
       (filter even?)
       (apply +)))

(defn- primes
  "Lazy sequence of primes generated by a lazy Sieve of Eratosthenes.

  See: http://clj-me.cgrand.net/2009/07/30/everybody-loves-the-sieve-of-eratosthenes/"
  []
  (letfn [(enqueue [sieve n step]
            (let [m (+ n step)]
              (if (sieve m)
                (recur sieve m step)
                (assoc sieve m step))))
          (next-sieve [sieve candidate]
            (if-let [step (sieve candidate)]
              (-> sieve
                  (dissoc candidate)
                  (enqueue candidate step))
              (enqueue sieve candidate (+ candidate candidate))))
          (next-primes [sieve candidate]
            (if (sieve candidate)
              (recur (next-sieve sieve candidate) (+ candidate 2))
              (cons candidate
                    (lazy-seq (next-primes (next-sieve sieve candidate)
                                           (+ candidate 2))))))]
    (cons 2 (lazy-seq (next-primes {} 3)))))

(defn- prime-factorization
  "Divide a number by a sequence of primes until it is reduced to 1."
  ([number]
   (lazy-seq (prime-factorization number (primes))))
  ([number
    [prime & next-primes
     :as primes]]
   (when (< 1 number)
     (if (zero? (rem number prime))
       (cons prime
             (lazy-seq (prime-factorization (quot number prime)
                                            primes)))
       (recur number next-primes)))))

(defn euler-3
  "Largest prime factor"
  [number]
  (apply max (prime-factorization number)))

; vim: fdm=indent
