(ns project-euler.core)

(defn euler-1
  "Given a limit and multiplicands, find the sum of all multiples less than
  the limit. This, of course, does not include duplicate products."
  [limit & multiplicands]
  {:pre [(= 2 (count multiplicands))]}
  (->> multiplicands
       (map (partial range 0 limit))
       (apply concat)
       set
       (apply +)))

(defn- fibonacci
  "Provide a Clojure lazy-sequence for Fibonacci numbers."
  ([]
   (fibonacci 1 2))
  ([a b]
  (cons a (lazy-seq (fibonacci b (+ b a))))))

(defn euler-2
  "By considering the terms in the Fibonacci sequence whose values do not
  exceed four million, find the sum of the even-valued terms."
  [limit]
  (->> (fibonacci)
       (take-while (partial > limit))
       (filter even?)
       (apply +)))

(defn- primes
  "Lazy sequence of primes generated by a lazy Sieve of Eratosthenes.

  See: http://clj-me.cgrand.net/2009/07/30/everybody-loves-the-sieve-of-eratosthenes/"
  []
  (letfn [(enqueue [sieve n step]
            (let [m (+ n step)]
              (if (sieve m)
                (recur sieve m step)
                (assoc sieve m step))))
          (next-sieve [sieve candidate]
            (if-let [step (sieve candidate)]
              (-> sieve
                  (dissoc candidate)
                  (enqueue candidate step))
              (enqueue sieve candidate (+ candidate candidate))))
          (next-primes [sieve candidate]
            (if (sieve candidate)
              (recur (next-sieve sieve candidate) (+ candidate 2))
              (cons candidate
                    (lazy-seq (next-primes (next-sieve sieve candidate)
                                           (+ candidate 2))))))]
    (cons 2 (lazy-seq (next-primes {} 3)))))

(defn- prime-factorization
  "Divide a number by a sequence of primes until it is reduced to 1."
  ([number]
   (lazy-seq (prime-factorization number (primes))))
  ([number
    [prime & next-primes
     :as primes]]
   (when (< 1 number)
     (if (zero? (rem number prime))
       (cons prime
             (lazy-seq (prime-factorization (quot number prime)
                                            primes)))
       (recur number next-primes)))))

(defn euler-3
  "Largest prime factor"
  [number]
  (apply max (prime-factorization number)))

(def ^:private palindromic-number?
  "Test if a number is palindromic by converting to a sequence of characters,
  and identifying if the sequence is equivalent to the sequence reversed."
  (comp (partial apply =)
        (juxt identity reverse)
        seq
        str))

(defn euler-4
  "Find the largest palindromic product of two three digit numbers.

  P = X + 10Y + 100Z + 1000Z + 10000Y + 100000X
  P = 1000001X + 10010Y + 1100Z
  P = 11(9091X + 910Y + 110Z)

  With a single 11, one of the three-digit multiplicands is 11, reducing the
  search space to three digit numbers divisible by 11 and those which are not."
  []
  (->> (for [multiple-of-eleven (range 990 900 -11)
             not-11-multiple (->> (range 999 900 -1)
                                  (remove (comp zero?
                                                #(rem % 11))))]
         (* multiple-of-eleven not-11-multiple))
       (filter palindromic-number?)
       (apply max)))

(defn- greatest-common-divisor
  "Greatest common divisor, as per Euclid."
  [a b]
  (when (= a b)
    a)
  (if (> b a)
    (recur b a)
    (if (zero? b)
      a
      (recur b (rem a b)))))

(defn- least-common-multiple
  "Least common multiple via greatest common divisor."
  [a b]
  (/ (* a b)
     (greatest-common-divisor a b)))

(defn euler-5
  "What is the GCD of the integers between (inclusive) 1 and 20?"
  [n]
  (reduce least-common-multiple
          (range 1 (inc n))))

(defn- triangle-number
  "https://en.wikipedia.org/wiki/Triangular_number"
  [n]
  (-> n
      (* (inc n))
      (/ 2)))

(defn- square-pyramidal-number
  "https://en.wikipedia.org/wiki/Square_pyramidal_number"
  [n]
  (-> n
      (* (inc n))
      (* (-> n
             (* 2)
             inc))
      (/ 6)))

(defn euler-6
  "Find the difference between the sum of the squares of the first one hundred
  natural numbers and the square of the sum."
  [n]
  (- (-> (triangle-number n)
         (Math/pow 2) int)
     (square-pyramidal-number n)))

(defn euler-7
  "What is the nth prime?"
  [n]
  (nth (primes) (dec n)))

(def ^:private euler-8-data
  (->> ["73167176531330624919225119674426574742355349194934"
        "96983520312774506326239578318016984801869478851843"
        "85861560789112949495459501737958331952853208805511"
        "12540698747158523863050715693290963295227443043557"
        "66896648950445244523161731856403098711121722383113"
        "62229893423380308135336276614282806444486645238749"
        "30358907296290491560440772390713810515859307960866"
        "70172427121883998797908792274921901699720888093776"
        "65727333001053367881220235421809751254540594752243"
        "52584907711670556013604839586446706324415722155397"
        "53697817977846174064955149290862569321978468622482"
        "83972241375657056057490261407972968652414535100474"
        "82166370484403199890008895243450658541227588666881"
        "16427171479924442928230863465674813919123162824586"
        "17866458359124566529476545682848912883142607690042"
        "24219022671055626321111109370544217506941658960408"
        "07198403850962455444362981230987879927244284909188"
        "84580156166097919133875499200524063689912560717606"
        "05886116467109405077541002256983155200055935729725"
        "71636269561882670428252483600823257530420752963450"]
       (apply str)
       (map (comp #(- % (int \0))
                  int))))

(defn euler-8
  "Find the greatest adjacent digit product."
  [n]
  (->> (iterate next euler-8-data)
       (take n)
       (apply map *)
       (apply max)))

(defn- power-set
  "Given a collection, produce its powerset."
  [coll]
  (reduce (fn [accumulator element]
            (concat accumulator
                    (map #(conj % element) accumulator)))
          [[]]
          coll))

(defn- factors
  "Given the prime factorization of a number, generate its factors."
  [[:as prime-factorization]]
  (->> prime-factorization
       power-set
       (map (partial reduce *))
       (apply sorted-set)))

(def ^:private coprime-factors
  "Given the prime factorization of a number, generate factors that are
  coprime."
  (comp butlast
        (partial drop 1)
        factors
        (partial map (comp int
                           (fn [[base exp]]
                             (Math/pow base exp))))
        frequencies))

; vim: fdm=indent
