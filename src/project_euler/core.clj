(ns project-euler.core)

(defn euler-1
  "Given a limit and multiplicands, find the sum of all multiples less than
  the limit. This, of course, does not include duplicate products."
  [limit & multiplicands]
  {:pre [(= 2 (count multiplicands))]}
  (->> multiplicands
       (map (partial range 0 limit))
       (apply concat)
       set
       (apply +)))

(defn- fibonacci
  "Provide a Clojure lazy-sequence for Fibonacci numbers."
  ([]
   (fibonacci 1 2))
  ([a b]
  (cons a (lazy-seq (fibonacci b (+ b a))))))

(defn euler-2
  "By considering the terms in the Fibonacci sequence whose values do not
  exceed four million, find the sum of the even-valued terms."
  [limit]
  (->> (fibonacci)
       (take-while (partial > limit))
       (filter even?)
       (apply +)))

(defn- primes
  "Lazy sequence of primes generated by a lazy Sieve of Eratosthenes.

  See: http://clj-me.cgrand.net/2009/07/30/everybody-loves-the-sieve-of-eratosthenes/"
  []
  (letfn [(enqueue [sieve n step]
            (let [m (+ n step)]
              (if (sieve m)
                (recur sieve m step)
                (assoc sieve m step))))
          (next-sieve [sieve candidate]
            (if-let [step (sieve candidate)]
              (-> sieve
                  (dissoc candidate)
                  (enqueue candidate step))
              (enqueue sieve candidate (+ candidate candidate))))
          (next-primes [sieve candidate]
            (if (sieve candidate)
              (recur (next-sieve sieve candidate) (+ candidate 2))
              (cons candidate
                    (lazy-seq (next-primes (next-sieve sieve candidate)
                                           (+ candidate 2))))))]
    (cons 2 (lazy-seq (next-primes {} 3)))))

(defn- prime-factorization
  "Divide a number by a sequence of primes until it is reduced to 1."
  ([number]
   (lazy-seq (prime-factorization number (primes))))
  ([number
    [prime & next-primes
     :as primes]]
   (when (< 1 number)
     (if (zero? (rem number prime))
       (cons prime
             (lazy-seq (prime-factorization (quot number prime)
                                            primes)))
       (recur number next-primes)))))

(defn euler-3
  "Largest prime factor"
  [number]
  (apply max (prime-factorization number)))

(def ^:private palindromic-number?
  "Test if a number is palindromic by converting to a sequence of characters,
  and identifying if the sequence is equivalent to the sequence reversed."
  (comp (partial apply =)
        (juxt identity reverse)
        seq
        str))

(defn euler-4
  "Find the largest palindromic product of two three digit numbers.

  P = X + 10Y + 100Z + 1000Z + 10000Y + 100000X
  P = 1000001X + 10010Y + 1100Z
  P = 11(9091X + 910Y + 110Z)

  With a single 11, one of the three-digit multiplicands is 11, reducing the
  search space to three digit numbers divisible by 11 and those which are not."
  []
  (->> (for [multiple-of-eleven (range 990 900 -11)
             not-11-multiple (->> (range 999 900 -1)
                                  (remove (comp zero?
                                                #(rem % 11))))]
         (* multiple-of-eleven not-11-multiple))
       (filter palindromic-number?)
       (apply max)))

(defn- greatest-common-divisor
  "Greatest common divisor, as per Euclid."
  [a b]
  (when (= a b)
    a)
  (if (> b a)
    (recur b a)
    (if (zero? b)
      a
      (recur b (rem a b)))))

(defn- least-common-multiple
  "Least common multiple via greatest common divisor."
  [a b]
  (/ (* a b)
     (greatest-common-divisor a b)))

(defn euler-5
  "What is the GCD of the integers between (inclusive) 1 and 20?"
  [n]
  (reduce least-common-multiple
          (range 1 (inc n))))

; vim: fdm=indent
